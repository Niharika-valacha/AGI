import openai
import pyttsx3    # text to speech
import speech_recognition as sr # transcribe the audio to text
import requests
from bs4 import BeautifulSoup # web scrapping the html/xml file
# Set your OpenAI API key
openai.api_key = "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"

# Initialize the text-to-speech engine
engine = pyttsx3.init()    #generate speech to text

# Function to transcribe audio to text
def transcribe_audio_to_text(filename): #filename is arg that is too be transcribe 
    recognizer = sr.Recognizer() #instance of sr this object will perform the speech recognizition 
    with sr.AudioFile(filename) as source: #with st to open the audio file specified by file name
        audio = recognizer.record(source) # record it 
    try:
        return recognizer.recognize_google(audio) # transcribe 
    except:
        print("Skipping unknown error")
        

# Function to generate response using GPT-3
def generate_response(prompt):
    response = openai.Completion.create(
        engine="text-davinci-003", # specfy the engine gpt
        prompt=prompt, 
        max_tokens=4000, # no of response word 4000 is max
        n=1, 
        stop=None,
        temperature=0.5, # randomness , predictablity
    )
    return response["choices"][0]["text"]
# Function to convert text to speech
def speak_text(text):
    engine.say(text) # text to audio
    engine.runAndWait() # waait to play the speak
    
def search_redfin(location, budget):
    url = f"https://www.redfin.com/city/{location}/filter/property-type=house,min-price=0,max-price={budget}"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299"
    }
    #send request to search url
    res = requests.get(url, headers=headers)
    #parse html content
    soup = BeautifulSoup(res.content, "html.parser")
    #extract the house details
    results = soup.find_all("div", class_="HomeCardContainer")
    if len(results) == 0:
        return "Sorry, no results found."
    else:
        # print min 3 records 
        output = "Here are some houses in " + location + " that may interest you:\n"
        for i in range(min(3, len(results))):
            address = results[i].find("span", class_="streetAddress").text.strip()
            city = results[i].find("span", class_="cityStateZip").text.strip()
            price = results[i].find("div", class_="homecardV2Price").text.strip()
            beds = results[i].find("div", class_="stats").find_all("div", recursive=False)[0].text.strip()
            baths = results[i].find("div", class_="stats").find_all("div", recursive=False)[1].text.strip()
            sqft = results[i].find("div", class_="stats").find_all("div", recursive=False)[2].text.strip()
            output += f"{i+1}. {address}, {city}, {price}, {beds}, {baths}, {sqft}\n"
        return output
def main():
    while True:
        # Wait for user to say "genius"
        print("Say 'genius' to start recording your question..., or stop to exit")
        with sr.Microphone() as source:
            recognizer = sr.Recognizer()
            audio = recognizer.listen(source) # record the audio
        try:
            transcription = recognizer.recognize_google(audio)
            if transcription.lower() == "genius":
                # Record audio
                filename = "input.wav"
                print("Say your question...")
                with sr.Microphone() as source:
                    recognizer = sr.Recognizer()
                    source.pause_threshold = 1
                    audio = recognizer.listen(source, phrase_time_limit=None, timeout=None)
                    with open(filename, "wb") as f:
                        f.write(audio.get_wav_data())

                # Transcribe audio to text
                text = transcribe_audio_to_text(filename)
                if text:
                    print(f"You said: {text}")
                    # check  for stop command 
                    if text.lower =="stop":
                        print("stopping the program...")
                        break
                    # Search Redfin for houses
                    if "find me a house" in text.lower() and "in" in text.lower() and "that works for" in text.lower() and "my budget is" in text.lower():
                        # Extract location and budget from the user's query
                        location_start = text.lower().index("in") + 3
                        location_end = text.lower().index("that works for") - 1
                        location = text[location_start:location_end]
                        budget_start = text.lower().index("my budget is") + 13
                        budget_end = text.lower().index("k")
                        budget = text[budget_start:budget_end] + "000"
                        print(f"Searching Redfin for houses in {location} that work for 4 and have a budget of {budget}")

                        # Search Redfin and generate response
                        response = search_redfin(location, budget)
                        print(response)
 # Read response using text-to-speech
                        speak_text(response)

                    # Generate response using GPT-3
                    else:
                        response = generate_response(text)
                        print(f"GPT-3 says: {response}")

                        # Read response using text-to-speech
                        speak_text(response)


        except Exception as e:
            print("An error: {}".format(e))

if __name__ == "__main__":
    main()
    
    
    
